<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[UNICORN SQUARE GARDEN]]></title>
  <link href="http://kosakasakas.github.io/atom.xml" rel="self"/>
  <link href="http://kosakasakas.github.io/"/>
  <updated>2014-12-13T19:47:25+09:00</updated>
  <id>http://kosakasakas.github.io/</id>
  <author>
    <name><![CDATA[kosakasakas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ユニティちゃんを超ARしたときの話]]></title>
    <link href="http://kosakasakas.github.io/blog/2014/12/09/unity-chan-ar/"/>
    <updated>2014-12-09T00:53:56+09:00</updated>
    <id>http://kosakasakas.github.io/blog/2014/12/09/unity-chan-ar</id>
    <content type="html"><![CDATA[<p><img src="http://kosakasakas.github.io/images/unicorn/super_ar/res0.jpg" alt="super_ar_top" /></p>

<p>前回、<a href="http://kosakasakas.github.io/blog/2014/10/18/unity-realtime-ibl/">UnityでリアルタイムIBLしてみた</a>というエントリを書かせて頂きましたが、今回その応用バージョンで、IBL+AR=超ARしてみたのでその時のメモやら実装方法を残しておきます。</p>

<p>動画は以下のリンクにうぷしてますので、先に見てもらうと、「あら、こんな感じの事できるのねー」と雰囲気理解してもらえると思います。</p>

<ul>
<li><a href="http://www.nicovideo.jp/watch/sm25072244">ニコニコ動画</a></li>
<li><a href="https://vine.co/v/O6wpZr7lpMg">Vine</a></li>
</ul>


<!-- more -->


<iframe class="vine-embed" src="https://vine.co/v/O6wpZr7lpMg/embed/simple" width="320" height="320" frameborder="0"></iframe>


<script async src="//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>


<p>微妙にマーカーズレてたり、解像度低かったりしたので今度取り直してYoutubeに再アップします。。</p>

<h2>今回やった事</h2>

<p>前回記事をベースに、実装面で進化しているのは大きくは以下の二点です。</p>

<ul>
<li>IBLで使うCubemapTextureを静止画から動画に対応</li>
<li>WebCamからの映像をIBLに反映</li>
<li>AR対応</li>
</ul>


<p>現実とのインタラクションをより感じさせるために今回ARを使っていますが、任意の動画環境下で動きます。
Webcamだと解像度とかに限界を感じたので、インタラクションを無視できるなら、それっぽい動画を撮影して後でそれを流した方が雰囲気出るのかも知れないです。</p>

<p>ちなみに技術的に新規性のある事とかアイデアのある事は一切やっておらず、CG屋さんが使いそうなテクニックをそのまんまUnity上で行ってARに載せているだけです。</p>

<p>Youtubeでは本デモのようなImage-BasedなARは少なからずあって、海外の人がいくつか上げてるんですが、日本ではIBL+ARっていうのはあんまり見ないですね。</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=YxxCjV-2y_E">Image Based Lighting in Augmented Reality</a></li>
</ul>


<p>今回のデモではしっかりアンビエントとか焼いたり、シャドウを付けたり、細かい事しているので、演出面ではそこそこ雰囲気を出せたのではと思っています。</p>

<p>なによりユニティちゃんのアセットのクオリティが高い！</p>

<p>あと、先に言っておくと、ARについては特に特別な事はやっておらず、Unity ARでググったページを見ながらSDKインポートしたくらいしかしていません。</p>

<p>なので、ここからはほぼほぼレンダリングの話になります。</p>

<h2>環境とか</h2>

<p>今回の動作環境は以下の通りです。</p>

<ul>
<li>Mac Book Rro Retina 15-inch 2013</li>
<li>OS X 10.9.5</li>
<li>Unity Pro 4.5.4f1</li>
</ul>


<p>今回は禁断のUnity proを使用しています！ドヤァ！</p>

<p>ただこれは一ヶ月限定のイベントライセンスなので、来月には切れてノーマル無課金厨に戻ります。</p>

<p>今回はたまたま「<a href="http://unity-chan.com/contents/event/director-cup/">ユニティちゃんディレクター杯</a>」というコンテストをUnityさんが主催されていましたので、参加登録してイベントライセンスを付与して頂きました。</p>

<p>そして、今回の実装ではProでしかできない事をやっちゃってます。</p>

<p>詳しくは&#8221;実装方法&#8221;のところで述べますが、シーンをCubemapに焼くAPIはPro限定っぽいです。</p>

<p>ただ、今思えば別にこのAPI使わなくても実装できたんじゃね？と思っているので、今後暇だったらFree対応するかもしれません。</p>

<h2>実装方法</h2>

<h3>1. アセットを準備する</h3>

<p>まずはUnityちゃんのきれいなテクスチャを作りましょう。
ARにした時に、現実となるべくなじませるためには、アンビエントやシーンに非依存の環境光を焼く作業はほぼ必須だと思っています。</p>

<p>前回の記事と同じようにBlenderのCyclesでユニティちゃんをレンダリングしてテクスチャを刷新して下さい。</p>

<p>Cyclesでレンダリングするとたぶんこんな感じになります。</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/super_ar/cycles.jpg" alt="cycles" /></p>

<p>ユニティちゃんはミクと違って法線マップを持っていたり、そもそもテクスチャにアンビエントっぽい陰が乗っていたりするので焼かなくてもそれなりにリアルになるかもしれません。</p>

<p>ユニティちゃんは出来るコです。</p>

<p>テクスチャを焼きおえたらUnity上でテクスチャを差し替えて、Luxのマテリアルを各パーツに設定してください。</p>

<p>Luxについては<a href="http://kosakasakas.github.io/blog/2014/10/18/unity-realtime-ibl/">前回記事</a>を参照下さい。</p>

<p>自分は肌系はLux/Bumped Diffuse、洋服系はLux/Bumped Speculaer、髪はLux/Human/Hairを設定しています。</p>

<p>ここまでいくとこのくらいのクオリティまで出せます。</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/super_ar/ibl.jpg" alt="ibl" /></p>

<h3>2. IBLを動画に対応させる</h3>

<p>前回の実装ではIBLに使うDiffuse CubemapとSpecular Cubemapは事前に用意した静止画だったのですが、今回はこれらを動的に作成することで任意の動画をCubemapとして使えるようにします。</p>

<p>まず毎フレームIBLのCubemapを変更する方法ですが、自分はSetupLuxクラスを継承して書き換えて実装しました。</p>

<p>書き換えたCustomSetupLuxクラスはgistにのせときますので細かいところはこれを読んでください。</p>

<ul>
<li><a href="https://gist.github.com/kosakasakas/c664924756ecfb45d8f2#file-customsetuplux-cs">CustomSetupLux.cs</a></li>
</ul>


<p>(また、継承もとのSetupLux.csは<a href="https://github.com/larsbertram69/Lux">こちら</a>にあります。)</p>

<p>CustomSetupLuxの中でCubemapを書き換えている部分は以下の部分。</p>

<pre><code>spec = new Cubemap(cubemapSize, TextureFormat.ARGB32, true);
diff = new Cubemap(cubemapSize, TextureFormat.ARGB32, true);

Shader.SetGlobalTexture("_SpecCubeIBL", spec);
Shader.SetGlobalTexture("_DiffCubeIBL", diff);
</code></pre>

<p>オリジナルのLuxのSetGlobalTexture後に、こちらで一回SetGlobalTextureしておけば、あとはspec, diffの中身を書き換えていくだけで勝手にLuxがよしなに処理してくれます。</p>

<p>また、Cubemap型はイコールオペレーションではコピーされない点に注意です。
以下のようにColor[] colorをセットします。</p>

<pre><code>diff.SetPixels(color, face);
diff.Apply();
</code></pre>

<p>あとはこのdiffとspecの更新処理をLastUpdate()内で呼んであげれば毎フレームShaderのテクスチャが更新されるようになると思います。</p>

<p>また、SetupLux(というかMonoBehaviour)の関数をオーバーライドする際の注意点ですが、継承元の関数の指定子をpublic virtualに変更してからオーバーライドして下さい。じゃないと継承元が呼ばれません。</p>

<pre><code>// SetupLux側
public virtual void Update () {
    hogehoge();
}

// CustomSetupLux側
public override void Update () {
    base.Update ();
    fugafuga();
}
</code></pre>

<h3>3. WebCamからの映像をIBLに反映させる</h3>

<p>diffとspecがそれぞれリアルタイム更新されるようになったので、これに値を入れていきます。</p>

<p>IBLを実現するためには、ざっくり言うとユニティちゃん視点から周囲を映したテクスチャを作り、そのテクスチャのピクセル値をdiffやらspecやらに詰めていけば良いわけです。</p>

<p>そのためにはCameraクラスのRenderToCubemap()を使います。
使い方は以下の要領で、faceで面を指定しながらコールします。</p>

<pre><code>cam.transform.position = cameraPos;
cam.RenderToCubemap ( spec, face);
</code></pre>

<p>CustomSetupLuxクラスではUpdate()内でユニティちゃんの移動に合わせてcameraPosを更新し、それを上記のようにcam（ユニティちゃんサイドからみた仮想視点）にセットしてRenderToCubemapしています。</p>

<p>このような修正をすればユニティちゃんから見たシーンの映像がspecに格納されるようになります。</p>

<p>ただ、これだと周囲になんにも置かない限り真っ青なシーンがレンダリングされるだけだと思うので、シーンに半球をおいてそこにwebcamの映像を投影し、それをcamに撮影させます。(なんてワークアラウンド)</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/super_ar/cam.jpg" alt="cam" /></p>

<p>半球モデルは探しても無かったので自作しました。</p>

<ul>
<li><a href="https://gist.github.com/kosakasakas/c664924756ecfb45d8f2#file-semi_sphere-obj">semi_sphare.obj</a></li>
</ul>


<p>semi_sphare.objは映像投影用に法線方向を反転させて、半球内に描画されるようにモデリングしてあります。
UVも透視投影で良い感じにマップしてあります。</p>

<p>ちなみにBlenderで作ったのですが、OBJ以外Unityでうまく読んでくれなかったのでモデルをエクスポートする時はフォーマットに注意して下さい。</p>

<p>この半球をシーンのどっかにおいて、その中をcamが動くように調節します。
半球を二つ置いて閉じちゃう方が映像にムラが無くて良い感じです。</p>

<p>この半球に対してWebCamの画像を映す方法ですが、以下のスクリプトを半球に設定すればOKです。</p>

<ul>
<li><a href="https://gist.github.com/kosakasakas/c664924756ecfb45d8f2#file-webcambehaviourscript-cs">WebCamBehaviourScript.cs</a></li>
</ul>


<p>中身はわりとシンプルなので、コード見てもらえば分かると思います。</p>

<p>これでWebcam映像がspecに映るようになると思います!</p>

<h3>4. いい感じにテクスチャをぼかす</h3>

<p>環境光がキューブマップに焼けたのは良いのですが、specular用のCubemapとdiffuse用のCubemapは全然求められるものが違います。</p>

<ul>
<li>specular map</li>
</ul>


<p><img src="http://kosakasakas.github.io/images/unicorn/super_ar/spec.jpg" alt="spec_map" /></p>

<ul>
<li>diffuse map</li>
</ul>


<p><img src="http://kosakasakas.github.io/images/unicorn/super_ar/diff.jpg" alt="diff_map" /></p>

<p>上図はちゃんと計算されたspecularテクスチャとdiffuseテクスチャの違いなのですが、diffuse用はむちゃくちゃぼけてるのが分かると思います。</p>

<p>diffuseはオブジェクト表面でいろんな方向に拡散した光をシミュレートしたマップなので明るくぼけた印象のテクスチャになってます。</p>

<p>これを再現するために、今回は超単純ですが線形ブラーを実装しました。</p>

<p>しかも、GPUとか使わずに、めんどくさいので思いっきりC#で書いています。</p>

<p>参考にしたのは<a href="http://forum.unity3d.com/threads/contribution-texture2d-blur-in-c.185694/">こちらのCommunity</a>で議論されているブラーです。</p>

<p>ただこの実装だとキューブマップの境界でアーティファクトが発生してしまうので、実際には隣り合うマップの重なる部分もぼかしてスムーズにブラーがかかるようにしています。</p>

<p>CustomSetupLuxクラスのFastBlur()が実装したものです。</p>

<p>若干怪しい挙動しますが、まぁ許容範囲内です。。</p>

<p>そして、Fastと言っていますが、ものすごく遅いです。</p>

<p>遅すぎて毎フレやるとユニティちゃん動かないレベルです。</p>

<p>ですので実際にブラー処理をするのは数フレに一回程度にしましょう。
ついでにcubemapを書き直す事自体もそう頻繁にやる必要ないので、数フレに一回だけ書くようにします。</p>

<p>また、SpecularマップもDiffuseマップも高い解像度はまったく必要有りません。
雰囲気だけ合っていればよいし、映り込む領域も小さいので、Cubemapの解像度は16x16とかでOKです。</p>

<p>今回のデモで言えば、specは16x16で作って、diffuseはそれに半径8のブラーをかけてる感じです。</p>

<p>また、やってみると分かるのですが、こうして作ったdiffuseはとても暗いです。
本来はもっと光が漏れだしてほしい部分が明るくなってくれません。</p>

<p>かといって一律でoffsetを履かせると255を超えてしまう部分もあるので、サチらないように明るさを調整する必要があります。
つまりガンマ補正をかけます。</p>

<p>ガンマ補正は255諧調でいうと以下の感じで実装できます。たぶん。。</p>

<pre><code>Color[] GammaCorrection(Color[] input, int width, int height, float gamma) {
    Color[] output = new Color[width * height];
    for (int w = 0; w &lt; width; ++w) {
        for (int h = 0; h &lt; height; ++h) {
            output[width * w + h].r = 255.0f * Mathf.Pow(1.0f / 255.0f * input[width * w + h].r, 1.0f / gamma);
            output[width * w + h].g = 255.0f * Mathf.Pow(1.0f / 255.0f * input[width * w + h].g, 1.0f / gamma);
            output[width * w + h].b = 255.0f * Mathf.Pow(1.0f / 255.0f * input[width * w + h].b, 1.0f / gamma);
            output[width * w + h].a = 255.0f;
        }
    }
    return output;
}
</code></pre>

<p>これで明るさを調整できるので、程よい値を探しながらレンダリングしてみて下さい。</p>

<h3>4. ARしてみる</h3>

<p>AR自体は特別な事はしていません。
以下のサイトを参考にして設定しました。</p>

<ul>
<li><a href="http://kawakawa2000.jugem.jp/?eid=56">irofさんとAR（拡張現実）で遊んでみよう♪</a></li>
</ul>


<p>ちなみに、どこのサイトでもTargetDimensionは100で設定していますが、たぶんこれはデマで、Unity上のアセットの大きさを1を基準にしている場合は普通に1で良いです。</p>

<p>また、デモではキューブ形状のマーカーを置いていますが、実は前面のプレーンしか使っていません。</p>

<p>キューブでもやりましたが、なんか方向が逆に定まらず、一面だけの方が安定しました。</p>

<p>なので、キューブである必要は全くないのです。</p>

<p>あと、本デモではシャドウについてはシャドウの部分だけしっかりマスクして、あたかも床に影が出ているかのように演出しています。</p>

<p>床オブジェクトやマーカーキューブオブジェクトに以下のShaderをマテリアルを設定すれば、シャドウだけ表示する事が出来ますので参考にしてみてください。</p>

<ul>
<li><a href="https://gist.github.com/kosakasakas/c664924756ecfb45d8f2#file-shadowmask-shader">ShadowMask.shader</a></li>
</ul>


<h2>結果と考察</h2>

<p><img src="http://kosakasakas.github.io/images/unicorn/super_ar/setup.jpg" alt="setup" /></p>

<p>こんな感じでライトとステージを用意してライトをひたすら振りながらwebCamでユニティちゃんを追ってました。</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/super_ar/res1.jpg" alt="res1" />
<img src="http://kosakasakas.github.io/images/unicorn/super_ar/res2.jpg" alt="res2" />
<img src="http://kosakasakas.github.io/images/unicorn/super_ar/top.jpg" alt="res0" /></p>

<p><a href="http://www.nicovideo.jp/watch/sm25072244">動画</a>を見てもらうと分かりますが、ライトが変化するとそれに合わせてユニティちゃんもライティングされるのが分かります。</p>

<p>一応ユニティちゃんのポジションを追っているので、ライトに近づけば近づくほど色がつく（はず）</p>

<p>ちなみにマーカーとシャドウが微妙にズレているのは完全な設定ミスです。</p>

<p>本当はぴったり合いますが、血反吐を吐いていたので、このとき気づきませんでした。</p>

<p>思ったよりシーンに馴染んだのと、シーン変えてもどこでも割といい感じにIBLできたので、個人的には満足いってます。</p>

<p>あとは、シャドウが結構不自然なのでそれは直せたら直したいです。</p>

<p>平行光源を手動で一点置いちゃってる(主にシャドウ用)のでそれもできれば自動推定or外したいです。</p>

<p>でもシャドウをリアルにやるにはどうすれば良いのか。。</p>

<h2>最後に</h2>

<p>キャプチャするのに毎フレーム書き出していたんですが、それが激重で、そのまったりとした動きに合わせてカメラを動かすという作業は本当に骨が折れました。
なんか手軽にリアルタイムキャプチャできる方法があればご教授いただきたいこのごろです。</p>

<p>末筆になりますが、今回のデモは多くの方にTwitterやFacebook上で取り上げて頂き、制作者としてはとても嬉しく思っています。
<a href="http://3dnchu.com/archives/unity-chan-superar-realtimeibl/">こんなすばらしい記事</a>になったりしてすごくモチベーションが上がりました。</p>

<p>アドバイスや機材提供など、ご協力いただいた方々にもあらためて感謝したいと思います。
ありがとうございました。</p>

<h2>ライセンス表記</h2>

<div><img src="http://unity-chan.com/images/imageLicenseLogo.png" alt="ユニティちゃんライセンス"><p>このコンテンツは、『<a href="http://unity-chan.com/contents/license_jp/" target="_blank">ユニティちゃんライセンス</a>』で提供されています</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UnityでリアルタイムIBLしてみた]]></title>
    <link href="http://kosakasakas.github.io/blog/2014/10/18/unity-realtime-ibl/"/>
    <updated>2014-10-18T01:24:56+09:00</updated>
    <id>http://kosakasakas.github.io/blog/2014/10/18/unity-realtime-ibl</id>
    <content type="html"><![CDATA[<p><img src="http://kosakasakas.github.io/images/unicorn/miku/res1.jpg" alt="miku_cap" /></p>

<p>Unityでリアルタイムにイメージベースドライティング(割と疑似ですが。)してみたのでそのときのメモです。</p>

<p>Unityのゲーム画面キャプチャはYoutubeとニコ動の方にアップしてあるのでぜひ見てください。</p>

<ul>
<li><a href="http://youtu.be/s_aLvJGbGII">Youtube</a></li>
<li><a href="http://www.nicovideo.jp/watch/sm24722663">ニコニコ動画</a></li>
</ul>


<!-- more -->


<h2>どんな感じでやったか</h2>

<p>とりあえず全部リアルタイムでやるのは無理なので、アンビエントは全部テクスチャベイク&amp;ライトマップして静的な物として扱います。
リアルタイムでやったのは今回はディフューズとスペキュラとシャドウにしぼってやりました。</p>

<p>すごく分かりやすい記事がたくさんあったので、参考にした記事とハマったところとかのメモをのせます。</p>

<p>環境とかは以下の物を使っています。</p>

<ul>
<li>Unity 4.5.4f1 (free版)</li>
<li>Blender 2.7.2a</li>
</ul>


<h2>初音ミクを踊らせてみよう</h2>

<p>これはMMDforMecanimを使いました。
<a href="http://stereoarts.jp/">http://stereoarts.jp/</a></p>

<p>こちらのドキュメントは非常に分かりやすいので、そのままチュートリアルを実行すれば、特にハマることなくUnityで初音ミクを動かす事は出来ると思います。</p>

<p>自分が今回使ったモデルとモーションは以下の物です。ありがとうございます。</p>

<p>モデル：Tda式Appendミク / Tdaさん</p>

<p><a href="https://bowlroll.net/file/4576">https://bowlroll.net/file/4576</a></p>

<p>音源：WAVEFILE/初音ミク fullver. / 名無しさん</p>

<p><a href="http://www.nicovideo.jp/watch/sm14257396">http://www.nicovideo.jp/watch/sm14257396</a></p>

<p>モーション：WAVEFILE fullver.モーション / hinoさん</p>

<p><a href="http://bowlroll.net/up/dl5983">http://bowlroll.net/up/dl5983</a></p>

<p>ちなみに、いろいろモデルを使ってみてTda式ミクに着地しました。</p>

<p>理由はトゥーンシェードを外した時に一番しっくりくる事、装備品とかがスペキュラとかをつけた時に映える事、他のモデルだとシェーディングした時のフェイスパーツのつなぎ目がアーティファクトとして目立つ事などです。</p>

<p>頂点数なんかも少なすぎず、いい感じでした。</p>

<h2>Unityのライトマップでクオリティをあげよう</h2>

<p><img src="http://kosakasakas.github.io/images/unicorn/miku/robo_lightmap.jpg" alt="miku_lightmap" /></p>

<p>Unityのfree版でも時間をかけてライトマップを作れば上図のようなかなりきれいな絵が出せます。</p>

<p>ただ、ライトマップを焼く場合はstaticなオブジェクトである事が前提なので、対象物はステージとかterrainみたいな固定されたものである必要があります。</p>

<p>もちろん、初音ミクみたいなごりごりに動くオブジェクトをリアルタイムレンダリングしたい場合はシャドウとか陰影が常に動くので特定のシーンに依存するようなライトマップを焼いてしまうと動かした時になんか変な感じになってしまう訳です。</p>

<p>今回は動かないステージ部分のライティングと、ミクのシャドウ意外のアンビエントはライトマップやらプリレンダリングやらで先にテクスチャに焼き付ける方法を取ります。</p>

<p>ライトマップに関してはこちらの記事が非常に参考になるので一読して見てください。
一気にクオリティの高い絵が出せるようになると思います。</p>

<p><a href="http://tsubakit1.hateblo.jp/entry/2014/09/14/170753">http://tsubakit1.hateblo.jp/entry/2014/09/14/170753</a></p>

<p>ハマりポイントとしてはライトマップの解像度を適切に設定しないとかなり荒っぽくなるので気をつけてください。</p>

<p>で、試しに初音ミクをライトマップでレンダリングしてみます。</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/miku/miku_lightmap.jpg" alt="miku_lightmap" /></p>

<p>なんかすっごい微妙な感じになってます。</p>

<p>どんなにがんばってもこんな感じになってしまいます。
これは表示されていないポリゴンが遮蔽されてたり、本来離れたオブジェクトの陰が乗っちゃってたりしてこんな感じになってるんじゃないかなーと推測してます。</p>

<p>ポリゴン同士を離したり、パーツを分解してライトマップを作り直せればたぶん改善するんでしょうけど、MMDforMecanimで読み込んだ時点でUnity上ではパーツが分解できないみたいなので、Unity上での処理はあきらめました。</p>

<h2>Blenderでアンビエントオクルージョンをテクスチャに焼こう</h2>

<p>直接光やシーンに依存しない、間接光による陰影をアンビエントオクルージョンと言ったりするんですが、まじめにやると計算時間がすごくかかるので今回は先に述べたように、あらかじめ計算してテクスチャに焼いておく方法をとります。</p>

<p>Unity proではSSAOなどのリアルタイムアンビエントオクルージョン手法がデフォで入っているのですが、free版ではポストエフェクト処理全般が使えないので、自力で実装するか、テクスチャに焼いちゃうかしかないと思います。</p>

<p>Unity freeでSSAO実装できるんですかね？</p>

<p>で、オクルージョンを焼くんですが、当初はライトマップがいい感じなのでUnity上で焼いてしまおうと思ったんですが、さっきの図みたいにUnity上のミクだとアーティファクト乗りまくりなので、あきらめてBlenderでレンダリングする事にしました。</p>

<p>最近のBlenderには<a href="http://www.blenderguru.com/tutorials/introduction-to-cycles/">Cycles</a>というレンダラーが付いていて、かなり本格的なレンダリングができちゃいます。</p>

<p>しかもリアルタイムでプレビューが出来るので、調整もすごい楽。</p>

<p>Cyclesの使い方は以下のページを参考にしました。</p>

<p><a href="http://www.kitotan.com/944">http://www.kitotan.com/944</a>
<a href="http://seiga.nicovideo.jp/seiga/im2951328">http://seiga.nicovideo.jp/seiga/im2951328</a></p>

<p>解説通りに行くと以下のような絵が出せると思います。</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/miku/miku_cycles.jpg" alt="cycles" /></p>

<p>ポイントとしては、アンビエントオクルージョンを描きたいので、光源は消す事。
光源を消してもCyclesは環境光をいい感じに醸し出してくれます。
その分暗いので、環境光は強めに設定してください。</p>

<p>環境光の強度はこんな感じで設定します。</p>

<p><a href="http://silverspirecg.blog119.fc2.com/blog-entry-36.html">http://silverspirecg.blog119.fc2.com/blog-entry-36.html</a></p>

<p>このレンダリング結果をミクのテクスチャにベイクします。</p>

<pre><code>【レンダータブ＞ベイク】
</code></pre>

<p>でベイクできます。
パーツごとに選択してベイクしてください。
ここで、クリアチェックボックは外しておかないとテクスチャに上書きされていかないので、気をつけてください。</p>

<p>ベイクしたテクスチャは口の中とか遮蔽で真っ暗になっているので適宜手書きで最終調整して出来上がりです。</p>

<p>出来上がったテクスチャはGitHubに上げたので、参考にしてください。</p>

<h2>UnityでIBLをしよう</h2>

<p>クオリティの高いアルベド＋アンビエントテクスチャが焼けたので、いよいよイメージベースドレンダリングをしていきます。</p>

<p>UnityのIBLはSkyshopというマテリアル群が有名で、AssetStoreから購入する事ができます。
しかし、結構高いので、今回は無料で手に入るマテリアルでがんばる事にします。</p>

<p>Luxというマテリアルシェーダを使用しました。
使用方法はこちらの記事を参考にしました。
githubのmasterブランチzipを使用しています。</p>

<p><a href="http://qiita.com/yasei_no_otoko/items/18bd1e4ed9abc6da8357">http://qiita.com/yasei_no_otoko/items/18bd1e4ed9abc6da8357</a></p>

<p>基本は上記の記事通りにセッティングすれば動きます。
ただ、デフォルトではディフューズ環境マップとスペキュラ環境マップが1種類しかなく、バックグラウンドの画像解像度も低いので、自作します。</p>

<p>画像のソースはこちらから頂きました。</p>

<p><a href="http://www.hdrlabs.com/sibl/archive.html">http://www.hdrlabs.com/sibl/archive.html</a></p>

<p>このサイトからHDR画像を落としてくると、ディフューズ画像も付いてくるのですが、試してみるとちょっとぼかしが足りなくて、ディフューズ感が足りないので手動でもっとぼかします。</p>

<p>カウスブラー40pxくらいぼかすとちょうどいい感じがしました。めっちゃ適当ですね。。</p>

<p>で、ハマったのが、HDR画像だと環境マップ化する時に緑色になっちゃって変な色合いになります。
たぶん設定をちゃんとやれば取り込めると思うんですが、思考停止してjpgに変換してUnityで環境マップを作りました。</p>

<p>TextureTypeはRefrection、MappingはCylindricalでマップを作成します。</p>

<p>最終的な環境マップはgithubに上げておきました。</p>

<h2>リアルタイムソフトシャドウを出そう</h2>

<p>Unity free版のシャドウはほんとひどいです。</p>

<p>ハードシャドウしか出せない上に、初期設定のシャドウマップ解像度が低すぎてめっちゃジャギってます。</p>

<p>これもproならちゃんとソフトシャドウをリアルタイムに出してくれるのに、ほんとずるい。</p>

<p>てなわけで、ソフトシャドウはがんばって実装します。
参考文献はこちら</p>

<p><a href="http://unitycoder.com/blog/2014/07/15/unity-indie-soft-shadows-directional-light/">http://unitycoder.com/blog/2014/07/15/unity-indie-soft-shadows-directional-light/</a></p>

<p>コードはGitHubに上がってます。</p>

<p>簡単に言うと、Percentage Closer Filteringの簡易版見たいな感じで、AutoLightを改造して四方にサンプリングしたものになります。
デフォルトのクラスを改造しているのでフォルダを丸ごとぶっ込んで使ってください。</p>

<p>また、このシェーダはUnityでベイクしたライトマップの結果と互換性を持たせてあります。
なので、今回の初音ミク動画のシーンの静的オブジェクトに関しては、ライトマップをかけたあと、ミクのソフトシャドウが乗っているって感じです。</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/miku/res3.jpg" alt="miku_res3" /></p>

<p>ゆーてカーペットしかレンダリングされてないんですけどね笑
ソフトシャドウがちゃんと出ている事を確認できると思います。</p>

<h2>結果と課題</h2>

<p><img src="http://kosakasakas.github.io/images/unicorn/miku/res2.jpg" alt="miku_res2" /></p>

<p>動画の方が分かりやすいかと思いますが、シーンによってミクの陰影がほんのり色づいているのが分かるかと思います。</p>

<p>目とか髪の毛のスペキュラも環境の映り込みがばっちり移ってます。</p>

<p>これがIBLの効果であり、60FPSで動きます。</p>

<p>そんな重い処理していないので当たり前ですが。。</p>

<p>カメラの動きとか光源の動きにも対応できるので、色々応用は出来るのではないかと思います。任意の写真で対応できるので、ARとか面白いかも。</p>

<p>今回は手抜きでSSSとか実装していないので、手が空いたらやってみます。
被写界深度とかモーションブラーとか、ポストエフェクト系もやりたい。</p>

<h2>今回のアセット</h2>

<p>使用したアセットは以下から入手可能です。
適当にZIPダウンロードしてください。</p>

<p>また、利用する場合は各種READMEをご覧ください。
よろしくお願いします。</p>

<p><a href="https://github.com/kosakasakas/UnityIBLAssets">GitHub &ndash; UnityIBLAssets</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ポーセラーツサロンのサイトデザインしました]]></title>
    <link href="http://kosakasakas.github.io/blog/2014/09/20/porcelarts/"/>
    <updated>2014-09-20T18:47:29+09:00</updated>
    <id>http://kosakasakas.github.io/blog/2014/09/20/porcelarts</id>
    <content type="html"><![CDATA[<p><img src="http://kosakasakas.github.io/images/unicorn/yululu/logo.jpg" alt="logo" width="512" height="430"></p>

<p>頼まれまして、ポーセラーツサロンのデザインとブログのカスタマイズを行いました。</p>

<p>上の写真がそのとき作ったロゴです。</p>

<p>ポーセラーツって何やねんって感じですが、<strong>世界にたった一つしかないマイブランドのテーブルウェアを作る、とっても楽しくて実用的なハンドクラフト</strong>らしいです。</p>

<!-- more -->


<p>実際サロンで作ってるものがこちら</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/yululu/image.jpg" alt="image" /></p>

<p>結構本格的な食器とかが作れます。</p>

<p>僕が行った事としては、ロゴの作成、CSSのカスタマイズ、各種リンク、申し込みフォームの作成などです。</p>

<p>申し込みフォームについては、Google Apps Scriptを使って、いい感じにフォーム内容を整形して登録したメールアドレスに送ってくれるように実装しました。</p>

<p>コードはこんな感じです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function sendForm(e){
</span><span class='line'> 
</span><span class='line'>  // 件名
</span><span class='line'>  var subject = "申し込みあり"; 
</span><span class='line'>
</span><span class='line'>  // 本文
</span><span class='line'>  var body = "以下の内容で申し込みがありました。\nヾ(・ω・*)ノチェック!!\n------------------------------------------------------------";  
</span><span class='line'>
</span><span class='line'>  // フッターに記述する内容
</span><span class='line'>  var footer = "------------------------------------------------------------\n内容の確認：\nhttps://docs.google.com/スプレットシートのURL\n"
</span><span class='line'>
</span><span class='line'>  var PRE='\n\n[';
</span><span class='line'>  var AFT=']\n\n';
</span><span class='line'>  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
</span><span class='line'>  // 項目名の取得
</span><span class='line'>  var COLUMN = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
</span><span class='line'>  
</span><span class='line'>  // メール送信
</span><span class='line'>  var to    = "AAAAA@gmail.com, BBBB@gmail.com";
</span><span class='line'>  var n = COLUMN.length
</span><span class='line'>  for ( var i = 0; i &lt; n; ++i) {
</span><span class='line'>    var key = COLUMN[i];
</span><span class='line'>    body += PRE+key+AFT+e.namedValues[key];
</span><span class='line'>  }
</span><span class='line'>  body += "\n\n";
</span><span class='line'>  body += footer;
</span><span class='line'>  MailApp.sendEmail(to, subject, body);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>実際のブログがこちらです。</p>

<p><a href="http://ameblo.jp/23712372/">http://ameblo.jp/23712372/</a></p>

<p>ぜひ訪れてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Compressor]]></title>
    <link href="http://kosakasakas.github.io/blog/2014/07/20/memorycompressor/"/>
    <updated>2014-07-20T15:21:27+09:00</updated>
    <id>http://kosakasakas.github.io/blog/2014/07/20/memorycompressor</id>
    <content type="html"><![CDATA[<p><img src="http://kosakasakas.github.io/images/unicorn/compressor/00_Frozen.jpg" alt="Frozen" /></p>

<p>旅行に行ったときに取った写真が1000枚以上あるけど、いちいち見てる時間無いし、結構同じようなアングルの写真もたくさんあるし、ファイル名も日付けしかないから探しつらい。</p>

<p>これなんかうまい事要約して少ない情報にまとめて、さらっと思い出のサムネイルとかにしてくれないかなーと思ったので、動画像を一枚の画像に圧縮するプログラム書いてみました。</p>

<!-- more -->


<p>具体的には画像とか動画とかを適度にサンプリングして数ピクセルに無理矢理圧縮して、時系列に並べたサムネイル画像を作るだけです。</p>

<p>インプットの映像ごとにユニークな出力出るし、ある意味プロシージャルなテクスチャ生成が出来る訳です。</p>

<p>実装はopenFrameworks v0.8.2、iOS用のアプリケーションで作ってます。GUIとかは何もしていないので、oFのサンプルと同程度の作りですが、一応GitHubあがってます。</p>

<p><a href="https://github.com/kosakasakas/MemoryCompressor">GitHub &ndash; MemoryCompressor</a></p>

<p>このtop画像はこのプログラムで出力した<strong>アナと雪の女王</strong>の全編の圧縮画像です。<br/>
それっぽい！!</p>

<p>こちらはスペイン旅行に行った時の1000枚の写真の圧縮結果<br/>
あー、ここマドリードの夜だなーとか、バルセロナのビーチだなってのが何となく分かる。
<img src="http://kosakasakas.github.io/images/unicorn/compressor/06_Spain.jpg" alt="Spanish" /></p>

<p>で、こちらはBUMP OF CHICKENの2hくらいのLive映像を圧縮した画像<br/>
照明変化とか、ザイロバンドの発光が混じってて一番きれいにでた。
<img src="http://kosakasakas.github.io/images/unicorn/compressor/03_Live.jpg" alt="Live" /></p>

<p>これは映画<strong>僕の彼女はサイボーグ</strong>の圧縮画像<br/>
全編使ってます。
<img src="http://kosakasakas.github.io/images/unicorn/compressor/02_CyborgGirl.jpg" alt="CyborgGirl" /></p>

<p><strong>ナイトメアビフォアクリスマス</strong>の圧縮画像<br/>
思ったよりきれいにでなかった。
<img src="http://kosakasakas.github.io/images/unicorn/compressor/05_NightmareBeforeChristmas.jpg" alt="NightmareBeforeChristmas" /></p>

<p>なんとなくおしゃれな画像作れるので、自分の好きな映画とか、思い出映像で出力してみたら楽しいかも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写真レタッチしてみた]]></title>
    <link href="http://kosakasakas.github.io/blog/2014/06/21/xie-zhen-falseretatuti/"/>
    <updated>2014-06-21T23:28:51+09:00</updated>
    <id>http://kosakasakas.github.io/blog/2014/06/21/xie-zhen-falseretatuti</id>
    <content type="html"><![CDATA[<p>Photoshopのフィルタレイヤーでいろいろやってみた結果。<br/>
編集前のオリジナルの画像がこれ</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/bluegirl/bluegirl.jpg" alt="bluegirl" /></p>

<p>空を強調して前景の赤を強くしたのがこれ
<img src="http://kosakasakas.github.io/images/unicorn/bluegirl/bluegirl_white.jpg" alt="bluegirl2" /></p>

<!-- more -->


<p>空を個人的に好きな感じに調整したのがこれ
<img src="http://kosakasakas.github.io/images/unicorn/bluegirl/bluegirl_magenta.jpg" alt="bluegirl3" /></p>

<p>青に振り切ったのがこれ
<img src="http://kosakasakas.github.io/images/unicorn/bluegirl/bluegirl_magenta4.jpg" alt="bluegirl4" /></p>

<p>その後、アクションプラグインを色々やってこんな感じになりました。</p>

<p><img src="http://kosakasakas.github.io/images/unicorn/bluegirl/bluegirl_final.jpg" alt="bluegirl4" /></p>

<p>このPSのプラグインはちゃんと一回勉強しておきたいな</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://kosakasakas.github.io/blog/2014/06/21/tesuto/"/>
    <updated>2014-06-21T13:10:15+09:00</updated>
    <id>http://kosakasakas.github.io/blog/2014/06/21/tesuto</id>
    <content type="html"><![CDATA[<p><img src="http://kosakasakas.github.io/images/unicorn/unicorn.jpg" alt="lemonade" /></p>

<p>サイトはじめました。</p>

<p>なんか作ったらアップします。</p>

<!-- more -->

]]></content>
  </entry>
  
</feed>
